android硬编码需要注意的地方：
视频的编码和上面音频的编码也大同小异。摄像头的数据回调时间并不是确定的，就算你设置了摄像头FPS范围为30-30帧，它也不会每秒就一定给你30帧数据。Android摄像头的数据回调，受光线的影响非常严重，这是由HAL层的3A算法决定的，你可以将自动曝光补偿、自动白平光等等给关掉，这样你才有可能得到稳定的帧率。
而我们录制并编码视频的时候，肯定是希望得到一个固定帧率的视频。所以在视频录制并进行编码的过程中，需要自己想些法子，让帧率固定下来。最简单也是最有效的做法就是，按照固定时间编码，如果没有新的摄像头数据回调来就用上一帧的数据。

ediaCodec是Android4.1新增API，MediaMuxer是Android4.3新增API。
颜色空间。按照Android本身的意思，COLOR_FormatYUV420Planar应该是所有硬件平台都支持的。但是实际上并不是这样。所以在设置颜色空间时，应该获取硬件平台所支持的颜色空间，确保它是支持你打算使用的颜色空间，不支持的话应该启用备用方案（使用其他当前硬件支持的颜色空间）。
视频尺寸，在一些手机上，视频录制的尺寸可以是任意的。但是有些手机，不支持的尺寸设置会导致录制的视频现错乱。博主在使用Oppo R7测试，360*640的视频，单独录制视频没问题，音视频混合后，出现了颜色错乱的情况，而在360F4手机上，却都是没问题的。将视频宽高都设置为16的倍数，可以解决这个问题。
编码器格式设置，诸如音频编码的采样率、比特率等，取值也需要结合硬件平台来设置，否则也会导致崩溃或其他问题。这个其实和颜色空间的选择一样。
网上看到许多queueInputBuffer中设置presentationTimeUs为System.nanoTime()/1000，这样做会导致编码出来的音视频，在播放时，总时长显示的是错误的。应该记录开始时候的nanoTime，然后设置presentationTimeUs为(System.nanoTime()-nanoTime)/1000。
录制结束时，应该发送结束标志MediaCodec.BUFFER_FLAG_END_OF_STREAM，在编码后区获得这个标志时再终止循环，而不是直接终止循环。




RTMP	
优点：延迟较短，无需多次建连	
缺点：累积延迟，TCP不会丢包，对于服务器CPU占比较高	

HLS
优点：基于分片文件，可以做到无缝切换分辨率，HLS是苹果推出的，iOS支持的很好
缺点：延迟高，20s-30s，不适合互动很强的直播，HLS在建立连接和断开连接时候的握手，挥手会产生消耗


直播速度慢：
   probsize数值优化 4096 探测带第一帧后就会数据返回，如果这个值设置过小，会导致流的信息分析不完整，从而导致丢失流，用于秒开
   一个是probesize，一个是analyzeduration，分别用来控制其读取的数据量大小和时长。减少 probesize 和 analyzeduration 可以降低avformat_find_stream_info的函数耗时，达到起播快

走代理，设置ua标识默认没开启，，需要设置options。


ijkplayer 集成了三种播放器实现：

AndroidMediaPlayer：即安卓系统自带的播放器 MediaPlayer，基于 MediaCodec、AudioTrack 等安卓系统 API.
IjkExoMediaPlayer：即谷歌新推出的 ExoPlayer，同样是基于 MediaCodec、AudioTrack 等安卓系统 API，但相比 MediaPlayer 具有支持 DASH、高级 HLS、自定义扩展等优点。
IjkMediaPlayer：基于 FFmpeg 的 ffplay，集成了 MediaCodec 硬解码器、Opengl 渲染方式等。
一般而言， ijkplayer 就是指 IjkMediaPlayer，本文分析的对象就是 IjkMediaPlayer.

ijkplayer 在 Java 层的操作封装于 IjkMediaPlayer.java ，其中包含一些与底层通信的关键方法，比如播放控制相关的 start、pause、stop 等， 这些 native 方法对应的底层实现位于 ijkpalyer_ini.c 文件中。

在 IjkMediaPlayer.java 中有一些 @CalledByNative 注解的方法，比如底层的播放状态回调，这些方法由底层主动调用，具体位于 IjkMediaPlayer.c 文件中。

